import torch
import torch.nn.functional as F

def get_dewarping_matrix(step):
    if step == 0: return [1.0074838399887085, 0.0007350334199145436, 0.0018522378522902727, 0.0011821923544630408, -9.216999023919925e-05, -2.1575890059466474e-05, -0.0008361316868104041, -2.0978655811632052e-05, 2.024814057222102e-05, -9.610102279111743e-05, 0.005001508630812168, 1.0126982927322388, -0.002687784843146801, 0.0004823343479074538, -0.0003023565514013171, -0.00017967041640076786, 5.8112331316806376e-05, 0.0004127228748984635, -0.00010364824265707284, -3.341829142300412e-05, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
    if step == 1: return [1.0001074075698853, 0.00026503356639295816, 0.0014267113292589784, -0.000140930904308334, -0.00024006569583434612, -0.002316687721759081, -8.164918835973367e-05, 0.00024537910940125585, 0.0002223470073658973, 0.0020410853903740644, 0.005251534283161163, 1.0058963298797607, -0.004370789974927902, -0.000786478107329458, 0.00014022525283508003, -0.0018259487114846706, -0.0007027303799986839, 0.002358881291002035, -0.00045202276669442654, -0.004688096232712269, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
    if step == 2: return [0.9938850998878479, 0.0011783745139837265, 0.0, 0.001726538990624249, 0.00071810552617535, -0.0006797484820708632, -0.0037932987324893475, -0.00037118676118552685, -0.0031556240282952785, -0.003694966435432434, 0.005031114909797907, 1.0014299154281616, -0.00625627301633358, -0.0025116801261901855, 0.00016182185208890587, -0.007379685062915087, -0.0018687976989895105, 0.002322555286809802, 0.005523629952222109, -0.029866278171539307, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
    if step == 3: return [0.9869324564933777, 0.00224688439629972, -0.0008935428340919316, 0.002959209494292736, -0.0022612223401665688, 0.0018939843866974115, -0.004060809034854174, 0.0017625142354518175, -0.006656560115516186, -0.009651963599026203, 0.00016188605513889343, 1.0035479068756104, -0.010218928568065166, 0.0005651656538248062, -0.0009788924362510443, 0.0014329419936984777, 0.008163115940988064, 0.005938321352005005, 0.008032983168959618, -0.08853603154420853, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
    if step == 4: return [0.983738362789154, 0.0023218116257339716, -0.0017126877792179585, 0.001369951176457107, -0.004269269295036793, 0.004380248486995697, -0.016033707186579704, 0.0067543284967541695, -0.016424868255853653, -0.01624421216547489, 7.708399789407849e-05, 0.994385302066803, -0.012866039760410786, -0.001022055745124817, 0.0037307552993297577, 0.0027339875232428312, 0.009606639854609966, -0.008584169670939445, 0.013230630196630955, -0.09363924711942673, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
    if step == 5: return [0.9786288738250732, 0.003588682971894741, -0.0023918221704661846, 0.004777341615408659, -0.0037737672682851553, 0.002030150732025504, -0.013176627457141876, -0.010321627371013165, -0.026121007278561592, -0.015811236575245857, 0.001201795064844191, 1.0035192966461182, -0.01841144822537899, 0.008479919284582138, 0.003908892627805471, 0.0044402433559298515, 0.015674248337745667, 0.005413076840341091, 0.008270949125289917, -0.18248037993907928, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
    if step <= 10: return [0.9777207374572754, 0.003674966050311923, -0.000865395471919328, 0.00839876476675272, -0.00921174418181181, -0.00444203382357955, -0.024727338925004005, -0.007308421190828085, -0.05595914274454117, -0.009856735356152058, -0.0010057302424684167, 1.0023410320281982, -0.01852775737643242, 0.0016161234816536307, -0.0016956499312072992, 0.002951698610559106, 0.026358529925346375, -0.017851702868938446, -0.004329687915742397, -0.18836215138435364, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
    if step >= 11: return [0.9716978073120117, 0.056364890187978745, -0.029213212430477142, 0.03584786504507065, 0.0005257084267213941, -0.0900191217660904, -0.09005090594291687, -0.07786328345537186, -0.13387863337993622, -0.0701950192451477, 0.001431028125807643, 0.9523154497146606, -0.04134024307131767, 0.004861794412136078, 0.013068363070487976, 0.018636401742696762, 0.00844097975641489, -0.008905373513698578, -0.0029179020784795284, -0.10307711362838745, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]

def warp(blurry, params):
    M = params.reshape(10, 10)

    h, w = blurry.shape

    x = torch.linspace(-1, 1, w, device=blurry.device)
    y = torch.linspace(-1, 1, h, device=blurry.device)
    y, x = torch.meshgrid(y, x, indexing="ij")

    features = [x, y, 1, x*x, x*y, y*y, x*x*x, x*x*y, x*y*y, y*y*y]

    x_warped = sum(weight * feature for weight, feature in zip(M[0], features))
    y_warped = sum(weight * feature for weight, feature in zip(M[1], features))

    grid = torch.stack([x_warped, y_warped], dim=2)

    blurry_warp = F.grid_sample(
        blurry[None, None, :, :],
        grid[None, :, :, :],
        mode='bicubic',
        align_corners=True,
        padding_mode='border')[0, 0, :, :]

    return blurry_warp

def loss(sharp, blurry, M):
    blurry_warped = warp(blurry, M)

    blurry_warped_centered = blurry_warped - blurry_warped.mean()

    sharp_centered = sharp - sharp.mean()

    return torch.mean(torch.square(blurry_warped_centered - sharp_centered))

def main():
    from load_hdc import load_hdc

    device = torch.device("cuda")
    sample = 2

    for step in range(1, 10):

        sharp = load_hdc(step=step, cam=1, sample=sample, font="Times")
        blurry = load_hdc(step=step, cam=2, sample=sample, font="Times")

        sharp = torch.tensor(sharp, device=device)
        blurry = torch.tensor(blurry, device=device)

        M_eye = torch.eye(10, device=device).ravel()
        M_dewarp = torch.tensor(get_dewarping_matrix(step), device=device)

        loss_baseline = loss(sharp, blurry, M_eye).item()
        loss_warped = loss(sharp, blurry, M_dewarp).item()

        print("step", step)
        print("baseline:", loss_baseline)
        print("dewarped:", loss_warped)
        print()

if __name__ == "__main__":
    main()
